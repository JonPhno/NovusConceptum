@model NovusConceptum.Models.SondageViewModel.SondageViewModel

@{
    ViewData["Title"] = "Vote";
}

<h2>Vote</h2>

<form asp-action="Vote">
    <div class="form-horizontal">
        <h4>SondageViewModel</h4>
        <hr />
        <input asp-for="ID" class="form-control" type="hidden" />
        <input asp-for="Nom" class="form-control" type="hidden" />
        <input asp-for="Description" class="form-control" type="hidden" />
        <input asp-for="Date" class="form-control" type="hidden" />
        <input asp-for="DateFin" class="form-control" type="hidden" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.Nom)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Nom)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Description)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Description)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Options)
            </dt>
            <dd>
                @if (Model.Options != null)
                {
                    foreach (var item in Model.Options)
                    {
                        <input type="radio" name="selectedOption" value="@item"  /> @item <br>
                }
            }
            </dd>
        </dl>    
       
       
       
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
</form>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
